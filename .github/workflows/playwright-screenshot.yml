name: Screenshot Capture - Showcase

on:
  repository_dispatch:
    types: [screenshot]

jobs:
  validate:
    runs-on: ubuntu-latest

    steps:
      - name: Validate API Secret
        env:
          API_SECRET: ${{ secrets.API_SECRET }}
          RECEIVED_SECRET: ${{ github.event.client_payload.API_SECRET }}
        run: |
          if [ "$API_SECRET" != "$RECEIVED_SECRET" ]; then
            echo "Unauthorized request: Invalid secret"
            exit 1
          fi
          echo "Request authenticated successfully"

  capture-screenshot:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install Dependencies
        run: npm install @playwright/test

      - name: Take Screenshot and Send API Request
        env:
          API_URL: 'https://frontendobserver.com/api/payload-jobs/run'
          API_TOKEN: ${{ secrets.API_TOKEN }}
        run: |
          node -e "
          const { chromium } = require('@playwright/test');
          const fs = require('fs');
          const fetch = require('node-fetch');

          (async () => {
            const browser = await chromium.launch();
            const page = await browser.newPage({
              screen: {
                width: 1920, 
                height: 1080
              }
            });

            await page.goto('${{ github.event.inputs.url }}', { waitUntil: 'networkidle' });

            const screenshot = await page.screenshot({
                type: 'png',
            })
            await browser.close();

            const imageBase64 = screenshot.toString('base64');

            const response = await fetch(process.env.API_URL, {
              method: 'GET',
              headers: {
                'Authorization': `Bearer ${process.env.API_TOKEN}`,
                'Content-Type': 'application/json',
              },
              body: {
                showcase: "createAndUpdateMediaWorkflow",
                input: {
                  image: imageBase64,
                },
              },
            });

            if (!response.ok) {
              throw new Error(`API request failed: ${response.statusText}`);
            }

            console.log('API request successful.');
          })();
          "
