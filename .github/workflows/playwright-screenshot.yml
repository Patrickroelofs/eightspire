name: Screenshot Capture - Showcase

on:
  repository_dispatch:
    types: [screenshot]

jobs:
  authenticate-request:
    runs-on: ubuntu-latest

    steps:
      - name: Validate API Secret
        env:
          API_SECRET: ${{ secrets.API_SECRET }}
          RECEIVED_SECRET: ${{ github.event.client_payload.API_SECRET }}
        run: |
          if [ "$API_SECRET" != "$RECEIVED_SECRET" ]; then
            echo "Unauthorized request: Invalid secret"
            exit 1
          fi
          echo "Request authenticated successfully"

  capture-screenshot:
    runs-on: ubuntu-latest
    needs: authenticate-request

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install Dependencies
        run: npm install @playwright/test && npx playwright install

      - name: Take Screenshot
        env:
          PAGE_URL: ${{ github.event.client_payload.url }}
        run: |
          node << 'EOF'
          const { chromium } = require('@playwright/test');
          const fs = require('fs');

          (async () => {
            try {
              const pageUrl = process.env.PAGE_URL;
              if (!pageUrl) throw new Error("PAGE_URL is missing");

              console.log("Launching browser...");
              const browser = await chromium.launch();
              const page = await browser.newPage();
              await page.setViewportSize({ width: 1920, height: 1080 });

              console.log("Navigating to:", pageUrl);
              await page.goto(pageUrl, { waitUntil: 'networkidle' });

              console.log("Taking screenshot...");
              const screenshotPath = 'screenshot.png';
              await page.screenshot({ path: screenshotPath, type: 'png' });
              await browser.close();

              console.log("Screenshot saved:", screenshotPath);
            } catch (error) {
              console.error("Error:", error.message);
              process.exit(1);
            }
          })();
          EOF

      - name: Upload Screenshot Artifact
        uses: actions/upload-artifact@v4
        with:
          name: screenshot
          path: screenshot.png

  send-api-request:
    runs-on: ubuntu-latest
    needs: capture-screenshot

    steps:
      - name: Download Screenshot Artifact
        uses: actions/download-artifact@v4
        with:
          name: screenshot

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Send API Request
        env:
          API_URL: 'https://frontendobserver.com/api/payload-jobs/run'
          API_TOKEN: ${{ secrets.API_TOKEN }}
        run: |
          node << 'EOF'
          const fetch = require('node-fetch');

          (async () => {
            try {
              const apiUrl = process.env.API_URL;
              const apiToken = process.env.API_TOKEN;

              console.log("Sending API request...");
              const response = await fetch(apiUrl, {
                method: 'GET',
                headers: {
                  'Authorization': `Bearer ${apiToken}`,
                  'Content-Type': 'application/json',
                },
              });

              if (!response.ok) {
                throw new Error(`API request failed: ${response.status} ${response.statusText}`);
              }

              console.log("API request successful.");
            } catch (error) {
              console.error("Error:", error.message);
              process.exit(1);
            }
          })();
          EOF